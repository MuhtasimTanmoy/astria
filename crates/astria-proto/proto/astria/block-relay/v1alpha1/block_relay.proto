syntax = 'proto3';

package astria.block_relay.v1alpha1;

import "astria/primitive/v1/types.proto";
import "astria/sequencer/v1alpha1/transaction.proto";
import "astria/block-relay/v1alpha1/bid.proto";

// Request sent by the Proposer to the Relay to get the top of block bid.
message GetBidRequest {
    uint64 block_height = 1;
}

// Response sent by the Relay to the Proposer in response to a GetBidRequest. Contains
// the bid amount and hash of the `Bundle` for the Proposer to commit to.
message GetBidResponse {
    OpaqueBid bid = 1;
}

// Request sent by the Proposer to the Relay to get the top of block bundle. The commitment must be
// a signature over the `payload_hash` the Proposer received in `GetBidResponse`.
message GetBundleRequest {
    OpaqueBid bid = 1;
    bytes commitment = 2;
}

// Response sent by the Relay to the Proposer in response to a GetBundleRequest. Contains
// the `Bundle` payload for the top of block that the Proposer committed to in `GetBundleRequest`
// as well as the bidder's signature and public key for verification.
message GetBundleResponse {
    SignedBundle bundle = 1;
}

// Service for the Relay to provide the Proposer with the top of block bid and payload. The Relay listens
// for requests sent by the Proposer.
service TopOfBlockRelay {
  // Get the top of block bid for the given block number. The Proposer will use this bid to commit
  // to the hash provided in order to receive the payload `SignedBundle` to include as top-of-block.
  rpc GetBid(GetBidRequest) returns (GetBidResponse);

  // Get the top of block bundle for the given commitment. The Proposer will will commit to the hash
  // received in `GetBidResponse` in order to receive the `Bundle` in `GetBundleResponse` which it
  // will include as top-of-block.
  rpc GetBundle(GetBundleRequest) returns (GetBundleResponse);
}
